import sys
import os

# Adiciona o diretório raiz ao PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

import time
import math
from typing import List, Tuple, Optional
from .slamtec_manager import SlamtecManager
from .robot_motor_controller import RobotMotorController
from .config import *
from src.core.environment import GPIO_AVAILABLE, is_raspberry_pi
from .path_finder import PathFinder

class RobotNavigator:
    def __init__(self):
        """Inicializa o navegador do robô."""
        self.slamtec = SlamtecManager()
        self.motors = RobotMotorController()
        
        print("DEBUG: Inicializando RobotNavigator...")
        print(f"DEBUG: ROBOT_INITIAL_POSITION configurado como: {ROBOT_INITIAL_POSITION}")
        print(f"DEBUG: ROBOT_INITIAL_ANGLE configurado como: {ROBOT_INITIAL_ANGLE}°")
        
        self.current_position = ROBOT_INITIAL_POSITION
        self.current_angle = ROBOT_INITIAL_ANGLE
        self.current_target = None
        self.navigation_active = False
        self.is_returning_to_base = False
        self.base_position = ROBOT_INITIAL_POSITION
        self.is_adjusting_final_angle = False
        self.navigation_state = "IDLE"  # IDLE, NAVIGATING, RETURNING, COMPLETED
        
        # Inicializa o PathFinder com as dimensões do mapa (6m x 12m) e grid de 0.5m
        self.path_finder = PathFinder(width=12, height=24, grid_size=0.5)
        
        self.forbidden_areas = []
        self.is_autonomous = False
        self.current_path = []
        self.current_path_index = 0
        
        # Novos atributos para navegação melhorada
        self.path_smoothing_enabled = True
        self.obstacle_avoidance_enabled = True
        self.emergency_stop_active = False
        self.last_position_update = time.time()
        self.navigation_start_time = None
        self.estimated_completion_time = None
        
        # Atributos para precisão na chegada
        self.arrival_pause_time = 2.0  # segundos de pausa ao chegar no destino
        self.arrival_time = None
        self.is_paused_at_destination = False
        
        self.is_returning_to_initial_angle = False  # Nova flag para controle do retorno ao ângulo inicial
        
        print(f"DEBUG: Posição inicial definida: {self.current_position}")
        print(f"DEBUG: Ângulo inicial definido: {self.current_angle}°")
        print(f"DEBUG: Base position definida: {self.base_position}")
        print(f"DEBUG: ROBOT_INITIAL_ANGLE importado: {ROBOT_INITIAL_ANGLE}°")
        print(f"DEBUG: ROBOT_INITIAL_POSITION importado: {ROBOT_INITIAL_POSITION}")
        
        print(f"DEBUG: Área proibida configurada no navegador")
        
    def reset_to_initial_state(self):
        """Reseta o robô para o estado inicial"""
        print(f"DEBUG: Resetando robô para posição inicial: {ROBOT_INITIAL_POSITION}, ângulo: {ROBOT_INITIAL_ANGLE}°")
        
        # Preserva as áreas proibidas durante o reset
        preserved_forbidden_areas = self.forbidden_areas.copy()
        
        # Sempre usa a posição inicial definida em config.py
        self.current_position = ROBOT_INITIAL_POSITION
        self.current_angle = ROBOT_INITIAL_ANGLE
        
        # Reseta variáveis de navegação
        self.navigation_active = False
        self.current_target = None
        self.path = []
        self.path_index = 0
        self.is_adjusting_final_angle = False
        self.is_returning_to_base = False  # RESETA ESTE VALOR
        self.navigation_state = "IDLE"
        self.progress = 0.0
        self.start_time = None
        self.estimated_time_remaining = 0.0
        self.is_paused_at_destination = False
        
        # Restaura as áreas proibidas
        self.forbidden_areas = preserved_forbidden_areas
        self.path_finder.set_forbidden_areas(preserved_forbidden_areas)
        
        # Para os motores
        self.motors.stop()
        
        print(f"DEBUG: Robô resetado - Posição: {self.current_position}, Ângulo: {self.current_angle}°")
        print(f"DEBUG: Áreas proibidas preservadas: {len(self.forbidden_areas)}")
        print(f"DEBUG: is_returning_to_base resetado para: {self.is_returning_to_base}")
        
    def set_path(self, path: List[Tuple[float, float]]):
        """
        Define um novo caminho para o robô seguir.
        
        Args:
            path: Lista de pontos (x, y) que formam o caminho
        """
        self.current_path = self._smooth_path(path) if self.path_smoothing_enabled else path
        self.current_path_index = 0
        print(f"DEBUG: Caminho definido com {len(self.current_path)} pontos")
        
    def _smooth_path(self, path: List[Tuple[float, float]]) -> List[Tuple[float, float]]:
        """Suaviza o caminho para movimentos mais naturais"""
        if len(path) < 3:
            return path
            
        smoothed_path = [path[0]]  # Mantém o ponto inicial
        
        for i in range(1, len(path) - 1):
            prev_point = path[i - 1]
            current_point = path[i]
            next_point = path[i + 1]
            
            # Calcula o ponto médio ponderado
            smoothed_x = (prev_point[0] + 2 * current_point[0] + next_point[0]) / 4
            smoothed_y = (prev_point[1] + 2 * current_point[1] + next_point[1]) / 4
            
            smoothed_path.append((smoothed_x, smoothed_y))
            
        smoothed_path.append(path[-1])  # Mantém o ponto final
        return smoothed_path
        
    def update(self):
        """Atualiza o estado do robô durante a navegação"""
        # Verifica se a navegação está ativa
        if not self.navigation_active:
            print("DEBUG: update() - Navegação não ativa, retornando")
            return

        # Se está ajustando o ângulo final, continua o ajuste
        if self.is_adjusting_final_angle:
            print("DEBUG: update() - Ajustando ângulo final")
            self._adjust_final_angle()
            return

        # Verifica se há um alvo atual
        if not self.current_target:
            print("DEBUG: update() - Sem alvo atual, finalizando navegação")
            self._finalize_navigation()
            return

        # Verifica se chegou ao destino atual
        distance_to_target = self._calculate_distance(self.current_position, self.current_target)
        print(f"DEBUG: update() - Distância até alvo: {distance_to_target:.3f}m, Tolerância: {NAVIGATION_GOAL_TOLERANCE}m")
        
        if distance_to_target <= NAVIGATION_GOAL_TOLERANCE:
            print(f"DEBUG: update() - Chegou ao alvo {self.current_target}")
            
            # Avança para o próximo ponto do caminho
            self.path_index += 1
            
            if self.path_index >= len(self.path):
                # Navegação concluída - inicia ajuste de ângulo final
                print("DEBUG: update() - NAVEGAÇÃO CONCLUÍDA - Iniciando ajuste de ângulo final")
                self._start_final_angle_adjustment()
                return
            else:
                # Define o próximo alvo
                self.current_target = self.path[self.path_index]
                print(f"DEBUG: update() - Próximo alvo: {self.current_target}")
                
                # Atualiza o estado baseado na posição no caminho
                if self.path_index < len(self.path) // 2:
                    self.navigation_state = "NAVIGATING_TO_DESTINATION"
                    self.is_returning_to_base = False
                else:
                    self.navigation_state = "RETURNING_TO_BASE"
                    self.is_returning_to_base = True
                    
                print(f"DEBUG: update() - Estado atualizado: {self.navigation_state}")
        else:
            # Move em direção ao alvo atual
            self._move_towards_target()
            
        # Atualiza o progresso
        if len(self.path) > 1:
            self.progress = self.path_index / (len(self.path) - 1)
        else:
            self.progress = 0.0
        
    def _finalize_navigation(self):
        """Finaliza completamente a navegação"""
        print("DEBUG: === FINALIZANDO NAVEGAÇÃO ===")
        self.motors.stop()
        self.navigation_active = False
        self.is_adjusting_final_angle = False
        self.navigation_state = "COMPLETED"
        self.current_target = None
        self.path = []
        self.path_index = 0
        print("DEBUG: === NAVEGAÇÃO FINALIZADA ===")
        
    def _start_final_angle_adjustment(self):
        """Inicia o ajuste do ângulo final"""
        print("DEBUG: === INICIANDO AJUSTE DE ÂNGULO FINAL ===")
        self.motors.stop()
        self.navigation_state = "ADJUSTING_FINAL_ANGLE"
        self.is_adjusting_final_angle = True
        self.current_target = None
        self.path = []
        self.path_index = 0
        
        # Inicia o ajuste de ângulo
        self._adjust_final_angle()
        
    def _check_emergency_obstacles(self) -> bool:
        """Verifica se há obstáculos que requerem parada de emergência"""
        # Simulação de detecção de obstáculos próximos
        # Em um sistema real, isso viria dos sensores LIDAR
        current_time = time.time()
        
        # Simula detecção de obstáculos a cada 0.5 segundos
        if current_time - self.last_position_update > 0.5:
            # Verifica se há áreas proibidas muito próximas
            for area in self.forbidden_areas:
                if self._is_near_forbidden_area(area):
                    print("DEBUG: Área proibida detectada próxima - parada de emergência")
                    return True
                    
            self.last_position_update = current_time
            
        return False
        
    def _is_near_forbidden_area(self, area: List[Tuple[float, float]]) -> bool:
        """Verifica se o robô está muito próximo de uma área proibida"""
        # Calcula a distância mínima até a área proibida
        min_distance = float('inf')
        
        for i in range(len(area)):
            point1 = area[i]
            point2 = area[(i + 1) % len(area)]
            
            # Calcula a distância até o segmento de linha
            distance = self._distance_to_line_segment(point1, point2, self.current_position)
            min_distance = min(min_distance, distance)
            
        return min_distance < EMERGENCY_STOP_DISTANCE
        
    def _distance_to_line_segment(self, p1: Tuple[float, float], p2: Tuple[float, float], 
                                 point: Tuple[float, float]) -> float:
        """Calcula a distância de um ponto até um segmento de linha"""
        x, y = point
        x1, y1 = p1
        x2, y2 = p2
        
        # Calcula a distância até a linha infinita
        A = x - x1
        B = y - y1
        C = x2 - x1
        D = y2 - y1
        
        dot = A * C + B * D
        len_sq = C * C + D * D
        
        if len_sq == 0:
            return math.sqrt((x - x1) ** 2 + (y - y1) ** 2)
            
        param = dot / len_sq
        
        if param < 0:
            xx, yy = x1, y1
        elif param > 1:
            xx, yy = x2, y2
        else:
            xx = x1 + param * C
            yy = y1 + param * D
            
        return math.sqrt((x - xx) ** 2 + (y - yy) ** 2)
        
    def _emergency_stop(self):
        """Executa parada de emergência"""
        if not self.emergency_stop_active:
            print("DEBUG: PARADA DE EMERGÊNCIA ATIVADA!")
            self.motors.stop()
            self.emergency_stop_active = True
            self.navigation_state = "EMERGENCY_STOP"
            
        # Aguarda 2 segundos antes de tentar continuar
        if time.time() - self.last_position_update > 2.0:
            print("DEBUG: Tentando retomar navegação após parada de emergência")
            self.emergency_stop_active = False
            self.navigation_state = "NAVIGATING"
            self.last_position_update = time.time()

    def _calculate_movement(self, target: Optional[Tuple[float, float]], angle_error_rad: float) -> Tuple[float, float]:
        """Calcula os valores de movimento baseado no erro angular e distância"""
        if target is None:
            return 0.0, 0.0
            
        distance = self._calculate_distance(self.current_position, target)
        
        # Se a distância for muito pequena, o robô já está no ponto
        if distance < NAVIGATION_GOAL_TOLERANCE:
            forward_value = 0.0
            turn_value = 0.0
            print("DEBUG: Chegou ao destino, forward=0, turn=0")
        else:
            # Normaliza o erro angular para -180 a 180 graus
            angle_error_deg = math.degrees(angle_error_rad)
            if angle_error_deg > 180:
                angle_error_deg -= 360
            elif angle_error_deg < -180:
                angle_error_deg += 360
                
            # Calcula o valor de giro (mais suave)
            turn_value = math.sin(angle_error_rad) * ROBOT_TURN_SPEED
            
            # Velocidade de avanço baseada na distância e erro angular
            forward_value = min(distance * ROBOT_FORWARD_SPEED, ROBOT_MAX_SPEED)
            
            # Reduz a velocidade de avanço quando o erro angular é grande
            angle_factor = math.cos(angle_error_rad)  # 1 quando alinhado, 0 quando perpendicular
            forward_value *= max(0, angle_factor)  # Não permite velocidade negativa
            
            print(f"DEBUG: Distancia: {distance:.2f}m, Erro Angular: {angle_error_deg:.1f}°")
            print(f"DEBUG: Forward: {forward_value:.2f}, Turn: {turn_value:.2f}")
                
        # Converte para velocidades das rodas (limitando a -100 a 100)
        left_speed = max(-100, min(100, forward_value - turn_value))
        right_speed = max(-100, min(100, forward_value + turn_value))
        
        # Aplica os comandos aos motores
        if hasattr(self, 'motors'):
            self.motors.set_speed(left_speed, right_speed)
            print(f"DEBUG: Motores - esquerda: {left_speed:.2f}, direita: {right_speed:.2f}")
            
        return forward_value, turn_value
        
    def _check_obstacles(self, obstacles: dict) -> bool:
        """Verifica se há obstáculos perigosos próximos."""
        if not obstacles or 'obstacles' not in obstacles:
            return False
            
        for obstacle in obstacles['obstacles']:
            x, y, _ = obstacle
            
            # Converte coordenadas do obstáculo para o referencial do robô
            # (apenas para verificação de proximidade, não para navegação)
            dx_world = x - self.current_position[0]
            dy_world = y - self.current_position[1]
            distance = math.sqrt(dx_world*dx_world + dy_world*dy_world)
            
            if distance < EMERGENCY_STOP_DISTANCE:
                print(f"Obstáculo detectado! Distância: {distance:.2f}m")
                return True
        return False
        
    def _update_position(self, forward_value: float, turn_value: float):
        """Atualiza a posição e orientação do robô baseado nos comandos com precisão extrema"""
        # Atualiza orientação com precisão extrema
        angle_change = turn_value * ROBOT_TURN_SPEED * SIMULATION_TIMESTEP
        old_angle = self.current_angle
        self.current_angle = (self.current_angle + angle_change) % 360
        
        if turn_value != 0.0:
            print(f"DEBUG: _update_position - turn_value: {turn_value:.3f}, angle_change: {angle_change:.3f}°")
            print(f"DEBUG: _update_position - ângulo antigo: {old_angle:.2f}°, novo: {self.current_angle:.2f}°")
        
        # Atualiza posição com precisão extrema
        distance = forward_value * ROBOT_SPEED * SIMULATION_TIMESTEP
        angle_rad = math.radians(self.current_angle)
        
        # Calcula a nova posição com precisão de 4 casas decimais
        new_x = self.current_position[0] + distance * math.cos(angle_rad)
        new_y = self.current_position[1] + distance * math.sin(angle_rad)
        
        # Arredonda para 4 casas decimais para precisão extrema
        self.current_position = (
            round(max(0.0, min(MAP_WIDTH, new_x)), 4),
            round(max(0.0, min(MAP_HEIGHT, new_y)), 4)
        )
        
    def _reached_target(self, target: Tuple[float, float]) -> bool:
        """Verifica se o robô chegou ao ponto alvo."""
        dx = target[0] - self.current_position[0]
        dy = target[1] - self.current_position[1]
        distance = math.sqrt(dx*dx + dy*dy)
        return distance < NAVIGATION_GOAL_TOLERANCE
        
    def toggle_autonomous(self):
        """Alterna entre modo autônomo e manual."""
        self.is_autonomous = not self.is_autonomous
        if not self.is_autonomous:
            self.motors.stop()
            
    def cleanup(self):
        """Limpa recursos."""
        self.motors.cleanup()

    def set_autonomous_mode(self, autonomous):
        """Alterna entre modo autônomo e manual"""
        self.is_autonomous = autonomous
        if not autonomous:
            self.motors.stop()  # Para o robô ao sair do modo autônomo
            
    def move_manual(self, forward_value, turn_value):
        """Controle manual do robô"""
        if self.is_autonomous:
            return  # Ignora comandos manuais em modo autônomo
            
        # Converte valores do joystick (-1 a 1) para velocidades dos motores
        left_speed = (forward_value - turn_value) * 100
        right_speed = (forward_value + turn_value) * 100
        
        self.motors.set_speed(left_speed, right_speed)
        
    def move_to_point(self, target_point):
        """Move o robô para um ponto específico (modo autônomo)"""
        if not self.is_autonomous:
            return  # Ignora comandos autônomos em modo manual
            
        # TODO: Implementar navegação autônoma
        pass 

    def set_forbidden_areas(self, areas: List[List[Tuple[float, float]]]):
        """Define as áreas proibidas para o navegador"""
        self.forbidden_areas = areas
        self.path_finder.set_forbidden_areas(areas)
        print(f"DEBUG: {len(areas)} áreas proibidas configuradas no navegador")
        
    def navigate_to_and_return(self, destination: Tuple[float, float], base_position: Tuple[float, float]) -> None:
        """Navega até o destino e retorna à base com planejamento otimizado"""
        # SEMPRE usa a posição inicial definida em config.py como base
        actual_base_position = ROBOT_INITIAL_POSITION
        print(f"DEBUG: ===== INICIANDO NAVEGAÇÃO =====")
        print(f"DEBUG: Destino: {destination}")
        print(f"DEBUG: Base (config.py): {actual_base_position}")
        print(f"DEBUG: Posição atual: {self.current_position}, Ângulo atual: {self.current_angle}°")
        print(f"DEBUG: Áreas proibidas configuradas: {len(self.forbidden_areas)}")
        
        # Debug das áreas proibidas
        for i, area in enumerate(self.forbidden_areas):
            print(f"DEBUG: Área proibida {i}: {len(area)} pontos")
            for j, point in enumerate(area):
                print(f"DEBUG:   Ponto {j}: {point}")
        
        # Reset completo para nova navegação (MANTÉM as áreas proibidas)
        self.reset_to_initial_state()
        
        # Configura a navegação
        self.navigation_active = True
        self.start_time = time.time()
        self.navigation_state = "NAVIGATING_TO_DESTINATION"
        self.is_returning_to_base = False
        
        # Calcula o caminho completo: base -> destino -> base
        print(f"DEBUG: Calculando caminho completo: base -> destino -> base")
        
        # Caminho da base até o destino
        path_to_destination = self.path_finder.find_path(self.current_position, destination)
        if not path_to_destination:
            print("DEBUG: ERRO - Não foi possível encontrar caminho para o destino")
            self.navigation_active = False
            return
            
        # Caminho do destino até a base
        path_to_base = self.path_finder.find_path(destination, actual_base_position)
        if not path_to_base:
            print("DEBUG: ERRO - Não foi possível encontrar caminho de retorno à base")
            self.navigation_active = False
            return
            
        # Combina os caminhos: base -> destino -> base
        self.path = path_to_destination + path_to_base[1:]  # Remove duplicação do destino
        self.path_index = 0
        
        # Define o primeiro alvo
        if len(self.path) > 0:
            self.current_target = self.path[0]
        else:
            print("DEBUG: ERRO - Caminho vazio")
            self.navigation_active = False
            return
        
        print(f"DEBUG: Caminho completo calculado com {len(self.path)} pontos")
        for i, point in enumerate(self.path):
            print(f"DEBUG:   Ponto {i}: {point}")
        print(f"DEBUG: Primeiro alvo: {self.current_target}")
        print(f"DEBUG: Navegação ativa: {self.navigation_active}")
        print(f"DEBUG: ===== NAVEGAÇÃO INICIADA =====")
        
    def get_navigation_status(self) -> dict:
        """Retorna o status atual da navegação"""
        if not self.navigation_active:
            return {
                "state": "IDLE",
                "progress": 0.0,
                "estimated_time_remaining": 0.0,
                "current_target": None,
                "position": self.current_position,
                "angle": self.current_angle
            }
            
        # Calcula o progresso
        if len(self.path) > 1:
            progress = (self.path_index - 1) / (len(self.path) - 1)
        else:
            progress = 0.0
            
        # Calcula tempo restante
        time_remaining = 0.0
        if self.estimated_completion_time:
            time_remaining = max(0.0, self.estimated_completion_time - time.time())
            
        # Determina o estado atual
        current_state = self.navigation_state
        if self.is_paused_at_destination:
            current_state = "PAUSED_AT_DESTINATION"
        elif self.is_adjusting_final_angle:
            current_state = "ADJUSTING_FINAL_ANGLE"
            
        return {
            "state": current_state,
            "progress": progress,
            "estimated_time_remaining": time_remaining,
            "current_target": self.current_target,
            "position": self.current_position,
            "angle": self.current_angle,
            "is_returning_to_base": self.is_returning_to_base,
            "is_paused_at_destination": self.is_paused_at_destination
        }

    def _calculate_distance(self, p1: Tuple[float, float], p2: Tuple[float, float]) -> float:
        """Calcula a distância entre dois pontos"""
        return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2) 

    def _move_towards_target(self):
        """Move o robô em direção ao alvo atual"""
        if not self.current_target:
            return
            
        # Calcula o ângulo para o alvo
        dx = self.current_target[0] - self.current_position[0]
        dy = self.current_target[1] - self.current_position[1]
        target_angle = math.degrees(math.atan2(dy, dx))
        
        # Normaliza o ângulo para 0-360
        target_angle = (target_angle + 360) % 360
        
        # Calcula a diferença de ângulo
        angle_diff = (target_angle - self.current_angle + 180) % 360 - 180
        
        # Calcula a distância até o alvo
        distance = math.sqrt(dx*dx + dy*dy)
        
        # Inicializa valores de movimento
        forward_value = 0.0
        turn_value = 0.0
        
        # Logs para debug da velocidade
        print(f"DEBUG: _move_towards_target() - Estado: {self.navigation_state}")
        print(f"DEBUG: _move_towards_target() - is_returning_to_base: {self.is_returning_to_base}")
        print(f"DEBUG: _move_towards_target() - Distância até alvo: {distance:.3f}m")
        print(f"DEBUG: _move_towards_target() - Diferença de ângulo: {angle_diff:.2f}°")
        
        # Lógica de navegação simplificada
        if abs(angle_diff) > NAVIGATION_ANGLE_TOLERANCE:
            # Ajusta o ângulo primeiro
            turn_value = min(0.5, abs(angle_diff) / 30.0)
            if angle_diff < 0:
                turn_value = -turn_value
            print(f"DEBUG: _move_towards_target() - Ajustando ângulo: turn_value = {turn_value:.3f}")
            self.motors.set_speed(-turn_value * 100, turn_value * 100)
        else:
            # Move para o alvo
            forward_value = min(0.6, distance / 2.0)
            # Ajuste fino do ângulo durante o movimento
            if abs(angle_diff) > 2:
                turn_value = min(0.2, abs(angle_diff) / 25.0)
                if angle_diff < 0:
                    turn_value = -turn_value
            
            # Aplica os comandos aos motores
            left_speed = (forward_value - turn_value) * 100
            right_speed = (forward_value + turn_value) * 100
            left_speed = max(-50, min(50, left_speed))
            right_speed = max(-50, min(50, right_speed))
            
            print(f"DEBUG: _move_towards_target() - forward_value: {forward_value:.3f}")
            print(f"DEBUG: _move_towards_target() - turn_value: {turn_value:.3f}")
            print(f"DEBUG: _move_towards_target() - left_speed: {left_speed:.1f}%")
            print(f"DEBUG: _move_towards_target() - right_speed: {right_speed:.1f}%")
            
            self.motors.set_speed(left_speed, right_speed)
        
        # Atualiza a posição e ângulo do robô
        self._update_position(forward_value, turn_value)

    def _adjust_final_angle(self):
        """Ajusta o ângulo final para 270°"""
        print(f"DEBUG: === AJUSTE DE ÂNGULO FINAL ===")
        print(f"DEBUG: Ângulo atual: {self.current_angle:.2f}°")
        print(f"DEBUG: Ângulo desejado: {ROBOT_INITIAL_ANGLE}°")
        
        # Calcula a diferença de ângulo para 270°
        angle_diff = (ROBOT_INITIAL_ANGLE - self.current_angle + 180) % 360 - 180
        
        print(f"DEBUG: Diferença calculada: {angle_diff:.2f}°")
        print(f"DEBUG: Tolerância: 1.0°")
        print(f"DEBUG: Deve girar? {abs(angle_diff) > 1.0}")
        
        if abs(angle_diff) > 1.0:  # Tolerância menor para precisão
            # Ajusta o ângulo para 270° com velocidade adaptativa
            if abs(angle_diff) > 30:
                turn_value = min(0.8, abs(angle_diff) / 25.0)  # Giro mais rápido para diferenças grandes
            elif abs(angle_diff) > 10:
                turn_value = min(0.6, abs(angle_diff) / 30.0)  # Giro moderado
            else:
                turn_value = min(0.4, abs(angle_diff) / 35.0)  # Giro suave para ajuste fino
                
            # Define a direção do giro baseado na diferença
            if angle_diff > 0:
                # Precisa girar no sentido horário (ângulo atual < 270°)
                turn_value = abs(turn_value)
                direction = "horário"
            else:
                # Precisa girar no sentido anti-horário (ângulo atual > 270°)
                turn_value = -abs(turn_value)
                direction = "anti-horário"
                
            print(f"DEBUG: Comando de giro: {turn_value:.3f}")
            print(f"DEBUG: Direção do giro: {direction}")
            print(f"DEBUG: Ângulo atual: {self.current_angle:.2f}°, objetivo: {ROBOT_INITIAL_ANGLE}°")
            
            # Aplica o comando de giro
            self.motors.set_speed(-turn_value * 100, turn_value * 100)
            self._update_position(0.0, turn_value)
            
            print(f"DEBUG: Novo ângulo após giro: {self.current_angle:.2f}°")
            print(f"DEBUG: Diferença restante: {(ROBOT_INITIAL_ANGLE - self.current_angle + 180) % 360 - 180:.2f}°")
        else:
            print("DEBUG: === ÂNGULO AJUSTADO COM SUCESSO ===")
            print(f"DEBUG: Ângulo final: {self.current_angle:.2f}°")
            print(f"DEBUG: Diferença final: {(ROBOT_INITIAL_ANGLE - self.current_angle + 180) % 360 - 180:.2f}°")
            print("DEBUG: Robô na base com ângulo 270° (apontando para cima)")
            
            # Finaliza a navegação usando o método centralizado
            self._finalize_navigation() 